name: job-cv-match-ai

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: kong

services:
  oauth-users-service:
    image: oauth-users-img
    restart: always
    build:
      context: ./oauth-users
      dockerfile: Dockerfile.dev
    container_name: OAuthUsersCont
    env_file: "./oauth-users/.env"
    ports:
      - "9000:9000"
    volumes:
      - ./oauth-users:/code
      - ./kafka_schemas/python_schemas:/code/__generated__
    depends_on:
        - postgres_auth_dev_db
        - kafka-1
        - kafka-2
        - kafka-3
        - kafka-schema-compiler
    command:
      - bash
      - -c
      - |
        python app/initial_data.py
        poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 9000
    environment:
      - PYTHONPATH=/code

  ai-recom-engine-service:
    image: ai-recom-agent-service-img
    restart: always
    build:
      context: ./ai-recom-agent-service
      dockerfile: Dockerfile.dev
    container_name: AIRecommendationsEngineCont
    env_file: "./ai-recom-agent-service/.env"
    ports:
      - "9001:9001"
    volumes:
      - ./ai-recom-agent-service:/code
      - ./kafka_schemas/python_schemas:/code/__generated__
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-schema-compiler
  
  job-cv-match-ai-service:
    image: job-cv-match-ai-img
    restart: always
    build:
      context: ./job-cv-match-ai
      dockerfile: Dockerfile.dev
    container_name: JobCVMatchAICont
    env_file: "./job-cv-match-ai/.env"
    ports:
      - "9003:9003"
    volumes:
      - ./job-cv-match-ai:/code
      - ./kafka_schemas/python_schemas:/code/__generated__
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-schema-compiler

  todo:
    build:
      context: ./todo
      dockerfile: Dockerfile.dev
    container_name: TodoCont
    volumes:
      - ./todo:/code  # Sync local development directory with the container
      - ./kafka_schemas/python_schemas:/code/__generated__
    depends_on:
      - postgres_db
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-schema-compiler
    ports:
      - "9002:9002"  # Expose container port 9002 to host port 8002  
  
  kafka-1:
    image: apache/kafka:latest
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-2:
    image: apache/kafka:latest
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-3:
    image: apache/kafka:latest
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://localhost:49092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka-1:19092,kafka-2:19092,kafka-3:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    container_name: schema-registry-cont
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-1:19092,kafka-2:19092,kafka-3:19092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  postgres_test_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresTestCont
    environment:
      - POSTGRES_USER=mjunaidca
      - POSTGRES_PASSWORD=temp_test_pass
      - POSTGRES_DB=postgres_test_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_db:/var/lib/postgresql/data

  postgres_auth_dev_db:
    image: postgres:latest
    restart: always
    container_name: AuthDevCont
    environment:
      - POSTGRES_USER=mjunaidca
      - POSTGRES_PASSWORD=auth_pass
      - POSTGRES_DB=auth_dev_postgres
    ports:
      - "5437:5432"
    volumes:
      - postgres_auth_dev_db:/var/lib/postgresql/data

  postgres_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
      - "5434:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:8.6
    restart: always
    container_name: PgAdmin4Cont
    ports:
      - "8010:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=mjunaid@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=SuperSecret
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres_test_db
      - postgres_auth_dev_db
      - postgres_db

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      <<: *kong-env
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      <<: *kong-env
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_SSL_CERT: /etc/kong/ssl/kong.crt
      KONG_SSL_CERT_KEY: /etc/kong/ssl/kong.key
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong.crt:/etc/kong/ssl/kong.crt:ro
      - ./kong.key:/etc/kong/ssl/kong.key:ro
      # - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: kong
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  kafka-schema-compiler:
    build:
      context: ./kafka_schemas
      dockerfile: Dockerfile
    restart: on-failure
    image: kafka-schema-compiler-img
    container_name: kafka-schemas
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
      - kong
      - db
    volumes:
      - ./kafka_schemas:/code
    # entrypoint: ["./wait-for-it.sh", "kafka-1:19092", "kafka-2:19092", "kafka-3:19092", "schema-registry:8081", "kong:8000", "--", "python /code/create_kafka_topics.py && /bin/bash /code/kong_gateway_startup.sh && /code/register_schemas.sh"]


volumes:
  postgres_test_db:
    driver: local
  postgres_auth_dev_db:
    driver: local
  postgres_db:
    driver: local
  pgadmin:
    driver: local
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  

networks:
  default:
    driver: bridge
