version: 2.1
orbs:
  # The Python orb contains a set of prepackaged CircleCI configurations you can use repeatedly in your configuration files
  python: circleci/python@2.1.1

parameters:
  eval-mode:
    type: string
    default: "commit"

workflows:
  commit-workflow:  # This is the name of the workflow - feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    when:
      and:
        - equal: [ commit, << pipeline.parameters.eval-mode >> ]
    jobs:
      - run-commit-evals:
          context:
            - dl-ai-courses
  release-workflow:  # This is the name of the workflow - feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    when:
      and:
        - equal: [ release, << pipeline.parameters.eval-mode >> ]
    jobs:
      # Note: In a real application, you'd run these on commits to the main branch
      # for this course, we're using a parameter instead.
      - run-pre-release-evals:
          context:
            - dl-ai-courses
  full-workflow:  # This is the name of the workflow - feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    when:
      and:
        - equal: [ full, << pipeline.parameters.eval-mode >> ]
    jobs:
      - run-manual-evals:
          context:
            - dl-ai-courses

jobs:
  run-commit-evals:  # This is the name of the job - feel free to change it to better match what you're trying to do!
    # These next lines define the Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Docker Hub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images is available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a Python 3.10 container
    # Change the version below to your required version of Python
    docker:
      - image: cimg/python:3.10.5
    # Check out the code as the first step. This is a dedicated CircleCI step.
    # The Python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run assistant evals.
          command: python -m pytest test_assistant.py
  run-pre-release-evals:  # This is the name of the job - feel free to change it to better match what you're trying to do!
    # These next lines define the Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Docker Hub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images is available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a Python 3.10 container
    # Change the version below to your required version of Python
    docker:
      - image: cimg/python:3.10.5
    # Check out the code as the first step. This is a dedicated CircleCI step.
    # The Python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run release evals.
          command: echo "Run our pre-release model graded evals here."
  run-manual-evals: 
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run end to end evals.
          command: echo "Run our full eval suite here."

          