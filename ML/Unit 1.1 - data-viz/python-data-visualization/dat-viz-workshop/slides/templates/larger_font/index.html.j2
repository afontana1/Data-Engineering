{%- extends 'reveal/index.html.j2' -%}
{% set title = 'Beyond the Basics: Data Visualization in Python' %}
{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}
{% set repo_name = 'python-data-viz-workshop' %}
{% set svg_plot_max_height = 650 %}

{% from 'mathjax.html.j2' import mathjax %}
{% from 'jupyter_widgets.html.j2' import jupyter_widgets %}

{% set reveal_url_prefix = resources.reveal.url_prefix | default('https://unpkg.com/reveal.js@4.0.2', true) %}
{% set reveal_theme = resources.reveal.theme | default('white', true) %}
{% set reveal_transition = resources.reveal.transition | default('slide', true) %}
{% set reveal_number = resources.reveal.number | default('', true) %}
{% set reveal_scroll = resources.reveal.scroll | default(false, true) | json_dumps %}

{%- block header -%}
<!DOCTYPE html>
<html>
<head>

{%- block html_head -%}
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1" />

<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<title>{{title}} {{nb_title}} slides &ndash; Stefanie Molin</title>

{%- block html_head_js -%}
{%- block html_head_js_jquery -%}
<script src="{{ resources.jquery_url }}"></script>
{%- endblock html_head_js_jquery -%}
{%- block html_head_js_requirejs -%}
<script src="{{ resources.require_js_url }}"></script>
{%- endblock html_head_js_requirejs -%}
{%- endblock html_head_js -%}

{% block jupyter_widgets %}
  {%- if "widgets" in nb.metadata -%}
    {{ jupyter_widgets(resources.jupyter_widgets_base_url, resources.html_manager_semver_range, resources.widget_renderer_url) }}
  {%- endif -%}
{% endblock jupyter_widgets %}

<!-- General and theme style sheets -->
<link rel="stylesheet" href="{{ reveal_url_prefix }}/dist/reveal.css">
<!-- Reveal Theme -->
<link rel="stylesheet" href="{{ reveal_url_prefix }}/dist/theme/{{reveal_theme}}.css" id="theme">

<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
}
</script>

{% for css in resources.inlining.css -%}
  <style type="text/css">
    {{ css }}
  </style>
{% endfor %}

{% block notebook_css %}
{{ resources.include_css("static/index.css") }}
{% if resources.theme == 'dark' %}
    {{ resources.include_css("static/theme-dark.css") }}
{% else %}
    {{ resources.include_css("static/theme-light.css") }}
{% endif %}
<style type="text/css">
a.anchor-link {
   display: none;
}
.highlight { /* spacing between code block and the code inside it */
    margin: 0.4em 0.4em 0em !important;
}
.jp-Notebook {
    padding: 0;
}
.CodeMirror pre {
    padding: 0.4em !important;
    overflow-x: scroll !important; /* allow scrolling to see full code block */
}
.jp-MarkdownOutput {
    overflow: hidden !important;
}
.jp-RenderedHTMLCommon.jp-RenderedHTML.jp-OutputArea-output.jp-OutputArea-executeResult {
    padding-right: 5px !important; /* padding after lead-in text */
}
.jp-RenderedSVG > svg, .jp-OutputArea-output > svg { /* scale SVG plots */
    width: 75%;
}
.jp-OutputArea-executeResult > video { /* scale videos */
    width: 900px;
    height: 600px;
}
.jp-OutputArea-executeResult > img, .jp-OutputArea-output > img { /* formatting for HoloViews image outputs */
    margin: 0 !important;
}
.slide-number {
    background-color: transparent !important;
    color: black !important;
    font-size: 18pt !important;
}
.slides { /* pull slides to left */
    margin-left: -30px !important;
}
/* scrollbar formatting */
::-webkit-scrollbar-thumb {
    visibility: hidden; /* hide the scrollbar when not in use */
}
:hover::-webkit-scrollbar-thumb {
    visibility: hidden; /* to show the scrollbar on hover, change to "visible" */
}
::-webkit-scrollbar-track-piece:start { /* make a little space at the top of the scrollbar */
    background: transparent;
    margin-top: 20px;
}
::-webkit-scrollbar-track-piece:end { /* leave enough space at the bottom of the scrollbar for the slide number */
    background: transparent;
    margin-bottom: 60px;
}
:root {
    --jp-ui-font-size1: 18pt;       /* size of tables in outputs */
    --jp-content-font-size1: 26pt;  /* base size of text */
    --jp-code-font-size: 24pt;      /* size of code */
    --jp-cell-prompt-width: 160px;  /* width of In[] labels */
}
@media print {
  body {
    margin: 0;
  }
}
</style>

{{ resources.include_css("static/custom_reveal.css") }}

{% endblock notebook_css %}
{%- block html_head_js_mathjax -%}
{{ mathjax(resources.mathjax_url) }}
{%- endblock html_head_js_mathjax -%}

{%- endblock html_head -%}

</head>
{% endblock header%}

{%- block body_header -%}
{% if resources.theme == 'dark' %}
<body class="jp-Notebook" data-jp-theme-light="false" data-jp-theme-name="JupyterLab Dark">
{% else %}
<body class="jp-Notebook" data-jp-theme-light="true" data-jp-theme-name="JupyterLab Light">
{% endif %}
<div class="reveal">
<!--
<div class="footer" style="padding: 4px; font-size: 22px;">
    {{title}} &ndash; Stefanie Molin
    <div style="float: right; margin-top: -18px;">
        <a href="https://mybinder.org/v2/gh/stefmolin/{{repo_name}}/main?urlpath=lab" style="z-index: 1;" target="_blank" rel="noopener noreferrer">
            <img src="https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width: 100%; margin: 20px 0 0 0;">
        </a>
        <a href="https://github.com/stefmolin/{{repo_name}}" style="z-index: 1;" target="_blank" rel="noopener noreferrer">
            <img alt="View repo on GitHub" src="https://img.shields.io/badge/view-repo-orange?logo=github" style="max-width: 100%; margin: 20px 0 0 0;">
        </a>
    </div>
</div>
-->
<div class="slides">
{%- endblock body_header -%}

{% block footer_js %}
<script>
require(
    {
      // it makes sense to wait a little bit when you are loading
      // reveal from a cdn in a slow connection environment
      waitSeconds: 15
    },
    [
      "{{ reveal_url_prefix }}/dist/reveal.js",
      "{{ reveal_url_prefix }}/plugin/notes/notes.js"
    ],

    function(Reveal, RevealNotes){
        // Full list of configuration options available here: https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: false, // don't show for larger versions to have more room
            progress: true,
            slideNumber: "c",
            pdfSeparateFragments: false,
            history: true,
            transition: "{{reveal_transition}}",
            plugins: [RevealNotes],
            width: 1950,
            height: 1000,
            keyboard: {
                // map numpad numbers to their top row equivalents
                97: () => Reveal.triggerKey(49), // 1
                98: () => Reveal.triggerKey(50), // 2
                99: () => Reveal.triggerKey(51), // 3
            }
        });

        // jump to slide prompt
        Reveal.addKeyBinding(
            { keyCode: 71, key: "G", description: "Go to slide number" },
            () => {
                const slides = Reveal.getSlides();
                const input = prompt("Go to slide number");
                if (input !== undefined && input !== "" && input !== null && !isNaN(input)) {
                    const requestedSlideNumber = Math.max(Math.min(input, slides.length) - 1, 0);
                    const slideIndices = Reveal.getIndices(slides[requestedSlideNumber]);
                    Reveal.slide(slideIndices.h, slideIndices.v, 100); // set fragment to large number to ensure the full slide is displayed
                }
            }
        );

        var update = function(event){
          if(MathJax.Hub.getAllJax(Reveal.getCurrentSlide())){
            MathJax.Hub.Rerender(Reveal.getCurrentSlide());
          }
        };

        Reveal.addEventListener('slidechanged', update);

        function setScrollingSlide() {
            let scale = 95;
            let h = $('.reveal').height() * scale / 100;
            let slide = $('section.present').find('section')
              .filter(function() {
                return $(this).height() > h;
              })
              .css('overflow', 'scroll');

            if (self !== top) {
              // in iframe --> speaker mode view
              slide
                .css('height', '100%') // alternate values for speaker view (in iframe)
                .css('margin-top', '-50px')
                .css('transform', 'scale(0.95)');
              if (slide.context.location.search.includes('controls=false')) {
                // scroll presenter view to see fragments that will be coming up
                slide.scrollTop($('section.present')[0].scrollHeight / 2);
              }
            } else {
              slide
                .css('height', 'calc(' + scale + 'vh)') // sets height to scale percent of the viewport height (vh)
                .css('overflow', 'scroll')
                .css('margin-bottom', '70px')
                .css('margin-top', '-20px');
            }

            // hack to resize plots rendered as SVGs if they hit the height limit
            $('section.present').find('.jp-RenderedSVG').find('svg')
              .filter(function() {
                return $(this).height() >= {{svg_plot_max_height}} && $(this).width() / $(this).height() < 2;
              })
              .css('width', '50%');

            // make sure that responsive Bokeh plots don't outgrow their containers
            $('section.present').find('.bk-root').parent().css('max-width', '95%');
        }

        // check and set the scrolling slide every time the slide change
        Reveal.addEventListener('slidechanged', setScrollingSlide);

        // create links to any tagged cells
        $('[class*="celltag_"]').each((index, element) => {
            const tag = $(element).attr('class').split(' ').filter(x => x.includes('celltag_'))[0];
            const [ attr, value ] = tag.replace('celltag_', '').split('_');
            $(`.${tag}`).parentsUntil('section').last().parent().attr(attr, value);
        })

        // add keybindings for section shortcuts (cells must be tagged)
        const shortcuts = [
            { name: "section 1", key: "1", id: "section-1", keyCode: 49 },
            { name: "section 2", key: "2", id: "section-2", keyCode: 50 },
            { name: "section 3", key: "3", id: "section-3", keyCode: 51 }
        ];
        for (const shortcut of shortcuts) {
            const { id, key, name, keyCode } = shortcut;
            Reveal.addKeyBinding(
                { keyCode, key, description: `Jump to ${name}` },
                () => { window.location = `#/${id}`; }
            );
        }
    }
);
</script>
{% endblock footer_js %}
